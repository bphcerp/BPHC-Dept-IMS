services:
  server:
    build:
      dockerfile: ./server/deployment/Dockerfile
      context: .
    env_file:
      - .env
    environment:
      DB_HOST: db
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server:/usr/local/app/server
      - /usr/local/app/server/node_modules
    profiles:
      - "dev"

  server-prod:
    build:
      dockerfile: ./server/deployment/Dockerfile.prod
      context: .
    env_file:
      - .env
    environment:
      DB_HOST: db
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - server_logs:/usr/local/app/server/logs
      - server_files:/usr/local/app/server/files
    profiles:
      - "prod"

  db:
    image: postgres:15.3-bookworm
    env_file:
      - .env
    ports:
      - ${PGPORT}:${PGPORT}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 3
    volumes:
      - postgres_db:/var/lib/postgresql/data
    profiles:
      - "dev"
      - "prod"

  adminer:
    image: adminer:latest
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - ${ADMINER_PORT:-8080}:8080
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - "dev"
      - "prod"

  redis:
    image: redis:latest
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
      interval: 3s
      timeout: 3s
      retries: 3
    profiles:
      - "dev"
      - "prod"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--port", "${REDIS_PORT}"]

  client-prod:
    build:
      context: ./
      dockerfile: ./client/docker/Dockerfile.prod
    depends_on:
      - server-prod
    ports:
      - "${FRONTEND_PORT}:80"
    env_file:
      - .env
    profiles:
      - "prod"

  client:
    build:
      context: .
      dockerfile: ./client/docker/Dockerfile
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    env_file:
      - .env
    volumes:
      - ./client:/usr/local/app/client
      - /usr/local/app/client/node_modules
    profiles:
      - "dev"

volumes:
  postgres_db:
  server_logs:
  server_files:
